package application.parser;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

import application.wavefront.Field;
import application.wavefront.Object3D;
import application.wavefront.Vector;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;

public class WaveFrontParser {

	private Path path;
	private ArrayList<String> lines;
	private Object3D object;

	public WaveFrontParser(File file) {
		this.path = Paths.get(file.getPath());
		lines = new ArrayList<>();

		read();
	}

	private void read() {
		try {
			lines.addAll(Files.readAllLines(path));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public Object3D parse() {
		for (int i = 0; i < lines.size(); i++) {
			if (i == 0) {
				if (!lines.get(i).contains("generated by CINEMA 4D")) {
					new Alert(AlertType.ERROR, "Only CINEMA 4D generated Files supported!").showAndWait();
					return null;
				}
			}
			if (lines.get(i).equals("")) {
				continue;
			}

			if (lines.get(i).charAt(0) == 'g') {
				String[] group = lines.get(i).split(" ");
				if (group.length != 2) {
					new Alert(AlertType.ERROR, "wrong groupname defined!").showAndWait();
					return null;
				}
				object = new Object3D(group[1]);
			} else if (lines.get(i).charAt(0) == 'v') {
				if (object == null) {
					new Alert(AlertType.ERROR, "no group defined before the vector!").showAndWait();
					return null;
				}
				String[] vector = lines.get(i).split(" ");
				if (vector.length != 4) {

					new Alert(AlertType.ERROR, "wrong vektor format!").showAndWait();
					return null;
				}
				double x = Double.parseDouble(vector[1]);
				double y = Double.parseDouble(vector[2]);
				double z = Double.parseDouble(vector[3]);
				object.addVector(new Vector(x, y, z));
			} else if (lines.get(i).charAt(0) == 'f') {
				if (object == null) {
					new Alert(AlertType.ERROR, "no group defined before the field!").showAndWait();
					return null;
				}
				String[] field = lines.get(i).split(" ");
				if (field.length < 4 || field.length > 5) {
					new Alert(AlertType.ERROR, "wrong field format!").showAndWait();
					return null;
				}
				if (field.length == 4) {
					int index1 = Integer.parseInt(field[1]);
					int index2 = Integer.parseInt(field[2]);
					int index3 = Integer.parseInt(field[3]);
					object.addField(new Field(index1, index2, index3));
				} else if (field.length == 5) {
					int index1 = Integer.parseInt(field[1]);
					int index2 = Integer.parseInt(field[2]);
					int index3 = Integer.parseInt(field[3]);
					int index4 = Integer.parseInt(field[3]);
					object.addField(new Field(index1, index2, index3, index4));
				}

			}
		}
		return object;
	}

	public ArrayList<String> getLines() {
		return lines;
	}
}
